{
  "{CDA7697F-93F5-40EE-9BAD-2C352200B025}": {
    "source": "{\n  \"name\": \"os\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Mocking OS modules in Node.js\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"node\",\n    \"os\",\n    \"wes\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\"\n}",
    "mapping": {},
    "path": "{os}/package.json"
  },
  "{39FCEB7D-B234-4391-86E8-0F7223905862}": {
    "source": "const { Enumerator, VBArray } = require('JScript')\r\nconst { toPosixSep } = require('pathname')\r\nconst { get } = require('argv')\r\n\r\nconst WShell = require('WScript.Shell')\r\nconst FSO = require(\"Scripting.FileSystemObject\")\r\nconst IWshNetwork2 = require(\"WScript.Network\")\r\n\r\nconst SWbemLocator = require(\"WbemScripting.SWbemLocator\")\r\nconst SWbemServicesEx = SWbemLocator.ConnectServer()\r\n\r\n// 定数\r\nconst constants = {\r\n    UV_UDP_REUSEADDR: 4,\r\n    dlopen: {},\r\n    errno: {\r\n        E2BIG: 7,\r\n        EACCES: 13,\r\n        EADDRINUSE: 100,\r\n        EADDRNOTAVAIL: 101,\r\n        EAFNOSUPPORT: 102,\r\n        EAGAIN: 11,\r\n        EALREADY: 103,\r\n        EBADF: 9,\r\n        EBADMSG: 104,\r\n        EBUSY: 16,\r\n        ECANCELED: 105,\r\n        ECHILD: 10,\r\n        ECONNABORTED: 106,\r\n        ECONNREFUSED: 107,\r\n        ECONNRESET: 108,\r\n        EDEADLK: 36,\r\n        EDESTADDRREQ: 109,\r\n        EDOM: 33,\r\n        EEXIST: 17,\r\n        EFAULT: 14,\r\n        EFBIG: 27,\r\n        EHOSTUNREACH: 110,\r\n        EIDRM: 111,\r\n        EILSEQ: 42,\r\n        EINPROGRESS: 112,\r\n        EINTR: 4,\r\n        EINVAL: 22,\r\n        EIO: 5,\r\n        EISCONN: 113,\r\n        EISDIR: 21,\r\n        ELOOP: 114,\r\n        EMFILE: 24,\r\n        EMLINK: 31,\r\n        EMSGSIZE: 115,\r\n        ENAMETOOLONG: 38,\r\n        ENETDOWN: 116,\r\n        ENETRESET: 117,\r\n        ENETUNREACH: 118,\r\n        ENFILE: 23,\r\n        ENOBUFS: 119,\r\n        ENODATA: 120,\r\n        ENODEV: 19,\r\n        ENOENT: 2,\r\n        ENOEXEC: 8,\r\n        ENOLCK: 39,\r\n        ENOLINK: 121,\r\n        ENOMEM: 12,\r\n        ENOMSG: 122,\r\n        ENOPROTOOPT: 123,\r\n        ENOSPC: 28,\r\n        ENOSR: 124,\r\n        ENOSTR: 125,\r\n        ENOSYS: 40,\r\n        ENOTCONN: 126,\r\n        ENOTDIR: 20,\r\n        ENOTEMPTY: 41,\r\n        ENOTSOCK: 128,\r\n        ENOTSUP: 129,\r\n        ENOTTY: 25,\r\n        ENXIO: 6,\r\n        EOPNOTSUPP: 130,\r\n        EOVERFLOW: 132,\r\n        EPERM: 1,\r\n        EPIPE: 32,\r\n        EPROTO: 134,\r\n        EPROTONOSUPPORT: 135,\r\n        EPROTOTYPE: 136,\r\n        ERANGE: 34,\r\n        EROFS: 30,\r\n        ESPIPE: 29,\r\n        ESRCH: 3,\r\n        ETIME: 137,\r\n        ETIMEDOUT: 138,\r\n        ETXTBSY: 139,\r\n        EWOULDBLOCK: 140,\r\n        EXDEV: 18,\r\n        WSAEINTR: 10004,\r\n        WSAEBADF: 10009,\r\n        WSAEACCES: 10013,\r\n        WSAEFAULT: 10014,\r\n        WSAEINVAL: 10022,\r\n        WSAEMFILE: 10024,\r\n        WSAEWOULDBLOCK: 10035,\r\n        WSAEINPROGRESS: 10036,\r\n        WSAEALREADY: 10037,\r\n        WSAENOTSOCK: 10038,\r\n        WSAEDESTADDRREQ: 10039,\r\n        WSAEMSGSIZE: 10040,\r\n        WSAEPROTOTYPE: 10041,\r\n        WSAENOPROTOOPT: 10042,\r\n        WSAEPROTONOSUPPORT: 10043,\r\n        WSAESOCKTNOSUPPORT: 10044,\r\n        WSAEOPNOTSUPP: 10045,\r\n        WSAEPFNOSUPPORT: 10046,\r\n        WSAEAFNOSUPPORT: 10047,\r\n        WSAEADDRINUSE: 10048,\r\n        WSAEADDRNOTAVAIL: 10049,\r\n        WSAENETDOWN: 10050,\r\n        WSAENETUNREACH: 10051,\r\n        WSAENETRESET: 10052,\r\n        WSAECONNABORTED: 10053,\r\n        WSAECONNRESET: 10054,\r\n        WSAENOBUFS: 10055,\r\n        WSAEISCONN: 10056,\r\n        WSAENOTCONN: 10057,\r\n        WSAESHUTDOWN: 10058,\r\n        WSAETOOMANYREFS: 10059,\r\n        WSAETIMEDOUT: 10060,\r\n        WSAECONNREFUSED: 10061,\r\n        WSAELOOP: 10062,\r\n        WSAENAMETOOLONG: 10063,\r\n        WSAEHOSTDOWN: 10064,\r\n        WSAEHOSTUNREACH: 10065,\r\n        WSAENOTEMPTY: 10066,\r\n        WSAEPROCLIM: 10067,\r\n        WSAEUSERS: 10068,\r\n        WSAEDQUOT: 10069,\r\n        WSAESTALE: 10070,\r\n        WSAEREMOTE: 10071,\r\n        WSASYSNOTREADY: 10091,\r\n        WSAVERNOTSUPPORTED: 10092,\r\n        WSANOTINITIALISED: 10093,\r\n        WSAEDISCON: 10101,\r\n        WSAENOMORE: 10102,\r\n        WSAECANCELLED: 10103,\r\n        WSAEINVALIDPROCTABLE: 10104,\r\n        WSAEINVALIDPROVIDER: 10105,\r\n        WSAEPROVIDERFAILEDINIT: 10106,\r\n        WSASYSCALLFAILURE: 10107,\r\n        WSASERVICE_NOT_FOUND: 10108,\r\n        WSATYPE_NOT_FOUND: 10109,\r\n        WSA_E_NO_MORE: 10110,\r\n        WSA_E_CANCELLED: 10111,\r\n        WSAEREFUSED: 10112\r\n    },\r\n    signals: {\r\n        SIGHUP: 1,\r\n        SIGINT: 2,\r\n        SIGILL: 4,\r\n        SIGABRT: 22,\r\n        SIGFPE: 8,\r\n        SIGKILL: 9,\r\n        SIGSEGV: 11,\r\n        SIGTERM: 15,\r\n        SIGBREAK: 21,\r\n        SIGWINCH: 28\r\n    },\r\n    priority: {\r\n        PRIORITY_LOW: 19,\r\n        PRIORITY_BELOW_NORMAL: 10,\r\n        PRIORITY_NORMAL: 0,\r\n        PRIORITY_ABOVE_NORMAL: -7,\r\n        PRIORITY_HIGH: -14,\r\n        PRIORITY_HIGHEST: -20\r\n    }\r\n}\r\nconst EOL = \"\\r\\n\"\r\nconst devNull = \"\\\\\\\\.\\\\nul\"\r\n\r\n/**\r\n * Node.js バイナリがコンパイルされたオペレーティング システムの CPU アーキテクチャを返します。 可能な値は、\"arm\", \"arm64\", \"ia32\", \"mips\", \"mipsel\", \"ppc\", \"ppc64\", \"s390\", \"s390x\", および \"x64\"です。\r\n * @returns {string}\r\n */\r\nfunction arch() {\r\n    if (get('arch') === 'AMD64') return 'x64'\r\n    return WShell.ExpandEnvironmentStrings('%PROCESSOR_ARCHITECTURE%')\r\n}\r\n\r\n/**\r\n * プログラムが使用するデフォルトの並列処理量の推定値を返します。 常にゼロより大きい値を返します。\r\n * @returns {number} cpuのプロセッサー数\r\n */\r\nfunction availableParallelism() {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"SELECT * FROM Win32_Processor\")\r\n    const SWbemObjectSetEx = new Enumerator(SWbemObjectSet)\r\n    const cpu = SWbemObjectSetEx[0]\r\n    return cpu.NumberOfLogicalProcessors\r\n}\r\n\r\n/**\r\n * 各論理 CPU コアに関する情報を含むオブジェクトの配列を返します。 /proc ファイル システムが利用できない場合など、CPU 情報が利用できない場合、配列は空になります。\r\n * @returns {cpu[]} cpu\r\n */\r\nfunction cpus() {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"SELECT * FROM Win32_Processor\")\r\n    const SWbemObjectSetEx = new Enumerator(SWbemObjectSet)\r\n    const cpu = SWbemObjectSetEx[0]\r\n\r\n    // cpu情報を配列で受け取れないため、プロセッサーの数だけダミーを生成\r\n    return new Array(cpu.NumberOfLogicalProcessors)\r\n        .fill({\r\n            model: cpu.Name,\r\n            speed: cpu.MaxClockSpeed,\r\n            times: {\r\n                user: 0,\r\n                nice: 0,\r\n                sys: 0,\r\n                idle: 0,\r\n                irq: 0\r\n            }\r\n        })\r\n    return ''\r\n}\r\n\r\n/**\r\n * 空きシステム メモリの量をバイト単位で整数として返します\r\n * @returns {number} 利用可能物理メモリ\r\n */\r\nfunction freemem() {\r\n    // 空きシステム メモリの量をバイト単位で整数として返します。\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"Select * FROM Win32_OperatingSystem\")\r\n    const SWbemObjectEx = new Enumerator(SWbemObjectSet)[0]\r\n\r\n    /*\r\n    console.log(\"合計物理メモリ\")\r\n    console.log(() => SWbemObjectEx.TotalVisibleMemorySize)\r\n\r\n    console.log(\"合計仮想メモリ\")\r\n    console.log(() => SWbemObjectEx.TotalVirtualMemorySize)\r\n\r\n    console.log(\"利用可能物理メモリ\")\r\n    console.log(() => SWbemObjectEx.FreePhysicalMemory)\r\n\r\n    console.log(\"利用可能仮想メモリ\")\r\n    console.log(() => SWbemObjectEx.FreeVirtualMemory)\r\n\r\n    console.log(\"コミットチャージ合計\")\r\n    console.log(() => SWbemObjectEx.SizeStoredInPagingFiles - SWbemObjectEx.FreeSpaceInPagingFiles)\r\n\r\n    console.log(\"コミットチャージ制限値\")\r\n    console.log(() => SWbemObjectEx.SizeStoredInPagingFiles)\r\n\r\n    console.log(\"ページングファイルにマップできるサイズ\")\r\n    console.log(() => SWbemObjectEx.FreeSpaceInPagingFiles)\r\n\r\n    console.log(\"仮説 合計物理メモリ - 利用可能物理メモリ\")\r\n    console.log(() => SWbemObjectEx.TotalVisibleMemorySize - SWbemObjectEx.FreePhysicalMemory)\r\n    */\r\n    return SWbemObjectEx.FreePhysicalMemory\r\n}\r\n\r\n/**\r\n * pid で指定されたプロセスのスケジューリング優先度を返します。 pid が指定されていないか、0 の場合は、現在のプロセスの優先度が返されます。\r\n * @param {number} pid - プロセスID\r\n * @returns {number} 優先度\r\n */\r\nfunction getPriority(pid) {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"Select * FROM Win32_Process\")\r\n    const SWbemObjectSetEx = new Enumerator(SWbemObjectSet)\r\n\r\n    // 現在のプロセスIDを取得\r\n    if (pid == null || pid === 0) pid = SWbemServicesEx.Get(`Win32_Process.Handle='${WShell.Exec(\"mshta.exe\").ProcessID}'`).ParentProcessId\r\n\r\n    let result = 0\r\n    SWbemObjectSetEx\r\n        .filter(SWbemObjectEx => SWbemObjectEx.ProcessId === pid)\r\n        .forEach(SWbemObjectEx => result = SWbemObjectEx.Priority)\r\n\r\n    return result\r\n}\r\n\r\n/**\r\n * オペレーティング システムのホスト名を文字列として返します。\r\n * @returns {string} ホスト名\r\n */\r\nfunction hostname() {\r\n    return IWshNetwork2.ComputerName.toLowerCase()\r\n}\r\n\r\n/**\r\n * 1、5、15 分間の負荷平均を含む配列を返します。(未実装)\r\n * @returns {number[]} 整数値の配列\r\n */\r\nfunction loadavg() {\r\n    return [0, 0, 0]\r\n}\r\n\r\n/**\r\n * ネットワーク アドレスが割り当てられたネットワークインターフェイスを含むオブジェクトを返します。返されたオブジェクトの各キーはネットワークインターフェイスを識別します。 関連付けられた値は、割り当てられたネットワークアドレスをそれぞれ記述するオブジェクトの配列です。(実装不備あり)\r\n * @returns {object[]} ネットワークインターフェイスの配列\r\n */\r\nfunction networkInterfaces() {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"Select * From Win32_NetworkAdapterConfiguration\" /*Where IPEnabled = True\"*/)\r\n    const SWbemObjectSetEx = new Enumerator(SWbemObjectSet)\r\n\r\n    const result = {}\r\n    SWbemObjectSetEx.forEach(SWbemObjectEx => {\r\n        const caption = SWbemObjectEx.Caption\r\n        let res = [{}]\r\n\r\n        if (SWbemObjectEx.IPSubnet != null) {\r\n            const IPSubnet = new VBArray(SWbemObjectEx.IPSubnet)\r\n            IPSubnet.forEach((netmask, i) => {\r\n                res[i] = res[i] || {}\r\n                res[i].netmask = netmask\r\n            })\r\n        } else res[0].netmask = \"\"\r\n\r\n        if (SWbemObjectEx.IPAddress != null) {\r\n            const IPAddress = new VBArray(SWbemObjectEx.IPAddress)\r\n            IPAddress.forEach((address, i) => {\r\n                res[i] = res[i] || {}\r\n                res[i].address = address\r\n                res[i].family = address.includes('::') ? 'IPv6' : 'IPv4'\r\n            })\r\n        } else {\r\n            res[0].address = \"\"\r\n            res[0].family = \"\"\r\n        }\r\n\r\n        const mac = SWbemObjectEx.MACAddress\r\n        res = res.map(item => {\r\n            item.mac = mac\r\n            return item\r\n        })\r\n\r\n        result[caption] = res\r\n    })\r\n\r\n    return result\r\n}\r\n\r\n/**\r\n * pid で指定されたプロセスのスケジューリング優先度の設定を試みます。 pid が指定されていないか、0 の場合は、現在のプロセスのプロセス ID が使用されます。優先度入力は、-20 (高優先度) から 19 (低優先度) までの整数である必要があります。 Unix の優先度レベルと Windows の優先度クラスの違いにより、優先度は os.constants.priority の 6 つの優先度定数のいずれかにマップされます。 プロセスの優先度レベルを取得する場合、この範囲マッピングにより Windows では戻り値が若干異なる場合があります。 混乱を避けるために、優先度を優先度定数のいずれかに設定します。Windows では、優先順位を PRIORITY_HIGHEST に設定するには、昇格されたユーザー権限が必要です。 それ以外の場合、設定された優先度は黙って PRIORITY_HIGH に減らされます。(要テスト)\r\n * @param {number} pid - プロセスID\r\n * @param {number} priority - 優先度\r\n */\r\nfunction setPriority(pid = getPriority(), priority = constants.priority.PRIORITY_NORMAL) {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"Select * FROM Win32_Process\")\r\n    const SWbemObjectSetEx = new Enumerator(SWbemObjectSet)\r\n\r\n    SWbemObjectSetEx.forEach(SWbemObjectEx => {\r\n        if (SWbemObjectEx.ProcessId === pid) SWbemObjectEx.SetPriority(priority)\r\n    })\r\n}\r\n\r\n/**\r\n * オペレーティング システムの一時ファイルのデフォルトディレクトリを文字列として返します。\r\n * @returns {string} ディレクトリパス\r\n */\r\nfunction tmpdir() {\r\n    return toPosixSep(FSO.GetSpecialFolder(2).Path)\r\n}\r\n\r\n/**\r\n * システムメモリの合計量をバイト単位で整数として返します。\r\n * @returns {number} 合計物理メモリ\r\n */\r\nfunction totalmem() {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"Select * FROM Win32_OperatingSystem\")\r\n    const SWbemObjectEx = new Enumerator(SWbemObjectSet)[0]\r\n\r\n    return SWbemObjectEx.TotalVisibleMemorySize * 1024\r\n}\r\n\r\n/**\r\n * uname(3) によって返されたオペレーティングシステム名を返します。 \"Windows_NT\" を返します。\r\n * @returns {string} オペレーティングシステム名\r\n */\r\nfunction type() {\r\n    return 'Windows_NT'\r\n}\r\n\r\n/**\r\n * 現在有効なユーザーに関する情報を返します。 POSIX プラットフォームでは、これは通常、パスワード ファイルのサブセットです。 返されるオブジェクトには、ユーザー名、uid、gid、shell、homedir が含まれます。 Windows では、uid フィールドと gid フィールドは -1 で、shell は null です。\r\n * @param {object} 出力の指定エンコーディング(未実装)\r\n * @returns {object} ユーザー情報\r\n */\r\nfunction userInfo(options = { encoding: 'UTF-8' }) {\r\n    const info = {\r\n        uid: -1,\r\n        gid: -1,\r\n        username: WShell.ExpandEnvironmentStrings('%USERNAME%'),\r\n        homedir: toPosixSep(WShell.ExpandEnvironmentStrings('%HOMEDRIVE%') + WShell.ExpandEnvironmentStrings('%HOMEPATH%')),\r\n        shell: null\r\n    }\r\n    return info\r\n}\r\n\r\n/**\r\n * システム稼働時間を秒数で返します。\r\n * @returns {number} システム稼働時間\r\n */\r\nfunction uptime() {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"Select * From Win32_PerfFormattedData_PerfOS_System\")\r\n    const SWbemObjectSetEx = new Enumerator(SWbemObjectSet)\r\n\r\n    return SWbemObjectSetEx.reduce((acc, curr) => {\r\n        if (curr.SystemUptime) return curr.SystemUptime\r\n    }, '')\r\n}\r\n\r\n/**\r\n * カーネルのバージョンを識別する文字列を返します。\r\n * @returns {string} カーネルのバージョン\r\n */\r\nfunction version() {\r\n    const SWbemObjectSet = SWbemServicesEx.ExecQuery(\"Select * From Win32_OperatingSystem\")\r\n    const SWbemObjectSetEx = new Enumerator(SWbemObjectSet)\r\n\r\n    return SWbemObjectSetEx.reduce((acc, curr) => {\r\n        if (curr.Caption) return curr.Caption\r\n    }, '')\r\n}\r\n\r\n/**\r\n * Windows では RtlGetVersion() が使用され、それが使用できない場合は GetVersionExW() が使用されます。(未実装)\r\n * @returns {string} マシンタイプ\r\n */\r\nfunction machine() {\r\n    return \"x86_64\"\r\n}\r\n\r\nmodule.exports = {\r\n    arch,\r\n    availableParallelism,\r\n    cpus,\r\n    freemem,\r\n    getPriority,\r\n    hostname,\r\n    loadavg,\r\n    networkInterfaces,\r\n    setPriority,\r\n    tmpdir,\r\n    totalmem,\r\n    type,\r\n    userInfo,\r\n    uptime,\r\n    version,\r\n    machine,\r\n    constants,\r\n    EOL,\r\n    devNull\r\n}",
    "mapping": {},
    "path": "{os}/index.js"
  },
  "{57CF039F-BDFF-4064-9B01-9E9942A8200B}": {
    "source": "MIT License\r\n\r\nCopyright (c) 2023 wachaon\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
    "mapping": {},
    "path": "{os}/LICENSE"
  },
  "{BB820809-4660-4905-A6B8-DB1680EC0037}": {
    "source": "# os\r\nMocking OS modules in Node.js\r\n\r\nこのモジュールは [*wes*](https://github.com/wachaon/wes) で *Node.js* のモジュールを稼働させる際に *Node.js* のビルトインモジュール *os* を求めらる場合に使用します。\r\n\r\n各メソッドは *os* の挙動に近い情報を収集して返しますが、情報に不足があります。\r\n\r\n# install\r\n```bat\r\nwes install @wachaon/os --bare\r\n```",
    "mapping": {},
    "path": "{os}/README.md"
  }
}